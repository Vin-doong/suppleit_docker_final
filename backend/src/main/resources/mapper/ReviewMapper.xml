<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.suppleit.backend.mapper.ReviewMapper">
<resultMap id="ReviewResultMap" type="com.suppleit.backend.dto.ReviewDto">
    <result property="reviewId" column="review_id"/>
    <result property="memberId" column="member_id"/>
    <result property="title" column="title"/>
    <result property="content" column="content"/>
    <result property="views" column="views"/>
    <result property="rating" column="rating"/>
    <result property="likeCount" column="like_count"/>
    <result property="dislikeCount" column="dislike_count"/>
    <result property="isCommentable" column="is_commentable"/>
    <result property="createdAt" column="created_at"/>
    <result property="updatedAt" column="updated_at"/>
    <result property="productName" column="product_name"/>
    <result property="authorEmail" column="email"/>
    <result property="authorNickname" column="author_nickname"/>
</resultMap>

    <!-- 리뷰 등록 -->
    <insert id="insertReview" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO review (
        member_id, prd_id, product_name, title, content, rating, views, like_count, dislike_count, is_commentable, created_at
        ) VALUES (
        #{memberId}, #{prdId}, #{productName}, #{title}, #{content}, #{rating} ,0, 0, 0, #{isCommentable}, NOW()
        )
    </insert>

    <!-- 모든 리뷰 조회 (최신순) -->
    <select id="getAllReviews" resultMap="ReviewResultMap">
        SELECT
            r.review_id AS review_id,
            r.member_id AS member_id,
            r.title,
            r.content,
            r.views,
            r.rating,
            r.like_count,
            r.dislike_count,
            r.is_commentable,
            r.created_at,
            r.updated_at,
            r.product_name,
            m.email,
            m.nickname AS author_nickname
        FROM review r
        LEFT JOIN member m ON r.member_id = m.member_id
        LEFT JOIN product p ON r.prd_id = p.prd_id
        ORDER BY r.created_at DESC;
    </select>

    <!-- 특정 리뷰 조회 -->
    <select id="getReviewById" resultMap="ReviewResultMap">
        SELECT
            r.review_id AS reviewId,
            r.member_id AS memberId,
            r.title AS title,
            r.content AS content,
            r.views AS views,
            r.rating AS rating,
            r.like_count AS likeCount,
            r.dislike_count AS dislikeCount,
            r.is_commentable AS isCommentable,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt,
            r.prd_id AS prdId, 
            r.product_name AS productName,
            m.email AS authorEmail,
            m.nickname AS author_nickname
        FROM review r
        LEFT JOIN product p ON r.prd_id = p.prd_id
        LEFT JOIN member m ON r.member_id = m.member_id
        WHERE r.review_id = #{reviewId}
    </select>
    <!-- 리뷰 수정 -->
    <update id="updateReview">
        UPDATE review
        SET 
            title = #{title}, 
            content = #{content},
            product_name = #{productName},
            rating = #{rating},
            prd_id = #{prdId},
            updated_at = NOW()
        WHERE review_id = #{reviewId}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview">
        DELETE FROM review WHERE review_id = #{reviewId}
    </delete>

    <!-- 조회수 증가 -->
    <update id="incrementViews">
        UPDATE review 
        SET views = views + 1 
        WHERE review_id = #{reviewId}
    </update>

    <!-- 상품 조회 -->
    <select id="searchProducts" resultType="com.suppleit.backend.model.Product">
        SELECT 
            prd_id AS prdId, 
            product_name AS productName, 
            company_name AS companyName
        FROM product
        WHERE product_name LIKE CONCAT('%', #{keyword}, '%')
        LIMIT 10
    </select>

</mapper>